# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _loci.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_loci', [dirname(__file__)])
        except ImportError:
            import _loci
            return _loci
        if fp is not None:
            try:
                _mod = imp.load_module('_loci', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _loci = swig_import_helper()
    del swig_import_helper
else:
    import _loci
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _loci.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_loci.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_loci.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_loci.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_loci.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_loci.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_loci.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_loci.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_loci.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_loci.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_loci.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_loci.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_loci.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_loci.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_loci.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_loci.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_loci.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _loci.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _loci.vectors_swiginit(self,_loci.new_vectors(*args))
    __swig_destroy__ = _loci.delete_vectors
vectors.iterator = new_instancemethod(_loci.vectors_iterator,None,vectors)
vectors.__nonzero__ = new_instancemethod(_loci.vectors___nonzero__,None,vectors)
vectors.__bool__ = new_instancemethod(_loci.vectors___bool__,None,vectors)
vectors.__len__ = new_instancemethod(_loci.vectors___len__,None,vectors)
vectors.pop = new_instancemethod(_loci.vectors_pop,None,vectors)
vectors.__getslice__ = new_instancemethod(_loci.vectors___getslice__,None,vectors)
vectors.__setslice__ = new_instancemethod(_loci.vectors___setslice__,None,vectors)
vectors.__delslice__ = new_instancemethod(_loci.vectors___delslice__,None,vectors)
vectors.__delitem__ = new_instancemethod(_loci.vectors___delitem__,None,vectors)
vectors.__getitem__ = new_instancemethod(_loci.vectors___getitem__,None,vectors)
vectors.__setitem__ = new_instancemethod(_loci.vectors___setitem__,None,vectors)
vectors.append = new_instancemethod(_loci.vectors_append,None,vectors)
vectors.empty = new_instancemethod(_loci.vectors_empty,None,vectors)
vectors.size = new_instancemethod(_loci.vectors_size,None,vectors)
vectors.clear = new_instancemethod(_loci.vectors_clear,None,vectors)
vectors.swap = new_instancemethod(_loci.vectors_swap,None,vectors)
vectors.get_allocator = new_instancemethod(_loci.vectors_get_allocator,None,vectors)
vectors.begin = new_instancemethod(_loci.vectors_begin,None,vectors)
vectors.end = new_instancemethod(_loci.vectors_end,None,vectors)
vectors.rbegin = new_instancemethod(_loci.vectors_rbegin,None,vectors)
vectors.rend = new_instancemethod(_loci.vectors_rend,None,vectors)
vectors.pop_back = new_instancemethod(_loci.vectors_pop_back,None,vectors)
vectors.erase = new_instancemethod(_loci.vectors_erase,None,vectors)
vectors.push_back = new_instancemethod(_loci.vectors_push_back,None,vectors)
vectors.front = new_instancemethod(_loci.vectors_front,None,vectors)
vectors.back = new_instancemethod(_loci.vectors_back,None,vectors)
vectors.assign = new_instancemethod(_loci.vectors_assign,None,vectors)
vectors.resize = new_instancemethod(_loci.vectors_resize,None,vectors)
vectors.insert = new_instancemethod(_loci.vectors_insert,None,vectors)
vectors.reserve = new_instancemethod(_loci.vectors_reserve,None,vectors)
vectors.capacity = new_instancemethod(_loci.vectors_capacity,None,vectors)
vectors_swigregister = _loci.vectors_swigregister
vectors_swigregister(vectors)

class vectorf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _loci.vectorf_swiginit(self,_loci.new_vectorf(*args))
    __swig_destroy__ = _loci.delete_vectorf
vectorf.iterator = new_instancemethod(_loci.vectorf_iterator,None,vectorf)
vectorf.__nonzero__ = new_instancemethod(_loci.vectorf___nonzero__,None,vectorf)
vectorf.__bool__ = new_instancemethod(_loci.vectorf___bool__,None,vectorf)
vectorf.__len__ = new_instancemethod(_loci.vectorf___len__,None,vectorf)
vectorf.pop = new_instancemethod(_loci.vectorf_pop,None,vectorf)
vectorf.__getslice__ = new_instancemethod(_loci.vectorf___getslice__,None,vectorf)
vectorf.__setslice__ = new_instancemethod(_loci.vectorf___setslice__,None,vectorf)
vectorf.__delslice__ = new_instancemethod(_loci.vectorf___delslice__,None,vectorf)
vectorf.__delitem__ = new_instancemethod(_loci.vectorf___delitem__,None,vectorf)
vectorf.__getitem__ = new_instancemethod(_loci.vectorf___getitem__,None,vectorf)
vectorf.__setitem__ = new_instancemethod(_loci.vectorf___setitem__,None,vectorf)
vectorf.append = new_instancemethod(_loci.vectorf_append,None,vectorf)
vectorf.empty = new_instancemethod(_loci.vectorf_empty,None,vectorf)
vectorf.size = new_instancemethod(_loci.vectorf_size,None,vectorf)
vectorf.clear = new_instancemethod(_loci.vectorf_clear,None,vectorf)
vectorf.swap = new_instancemethod(_loci.vectorf_swap,None,vectorf)
vectorf.get_allocator = new_instancemethod(_loci.vectorf_get_allocator,None,vectorf)
vectorf.begin = new_instancemethod(_loci.vectorf_begin,None,vectorf)
vectorf.end = new_instancemethod(_loci.vectorf_end,None,vectorf)
vectorf.rbegin = new_instancemethod(_loci.vectorf_rbegin,None,vectorf)
vectorf.rend = new_instancemethod(_loci.vectorf_rend,None,vectorf)
vectorf.pop_back = new_instancemethod(_loci.vectorf_pop_back,None,vectorf)
vectorf.erase = new_instancemethod(_loci.vectorf_erase,None,vectorf)
vectorf.push_back = new_instancemethod(_loci.vectorf_push_back,None,vectorf)
vectorf.front = new_instancemethod(_loci.vectorf_front,None,vectorf)
vectorf.back = new_instancemethod(_loci.vectorf_back,None,vectorf)
vectorf.assign = new_instancemethod(_loci.vectorf_assign,None,vectorf)
vectorf.resize = new_instancemethod(_loci.vectorf_resize,None,vectorf)
vectorf.insert = new_instancemethod(_loci.vectorf_insert,None,vectorf)
vectorf.reserve = new_instancemethod(_loci.vectorf_reserve,None,vectorf)
vectorf.capacity = new_instancemethod(_loci.vectorf_capacity,None,vectorf)
vectorf_swigregister = _loci.vectorf_swigregister
vectorf_swigregister(vectorf)

class vectori(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _loci.vectori_swiginit(self,_loci.new_vectori(*args))
    __swig_destroy__ = _loci.delete_vectori
vectori.iterator = new_instancemethod(_loci.vectori_iterator,None,vectori)
vectori.__nonzero__ = new_instancemethod(_loci.vectori___nonzero__,None,vectori)
vectori.__bool__ = new_instancemethod(_loci.vectori___bool__,None,vectori)
vectori.__len__ = new_instancemethod(_loci.vectori___len__,None,vectori)
vectori.pop = new_instancemethod(_loci.vectori_pop,None,vectori)
vectori.__getslice__ = new_instancemethod(_loci.vectori___getslice__,None,vectori)
vectori.__setslice__ = new_instancemethod(_loci.vectori___setslice__,None,vectori)
vectori.__delslice__ = new_instancemethod(_loci.vectori___delslice__,None,vectori)
vectori.__delitem__ = new_instancemethod(_loci.vectori___delitem__,None,vectori)
vectori.__getitem__ = new_instancemethod(_loci.vectori___getitem__,None,vectori)
vectori.__setitem__ = new_instancemethod(_loci.vectori___setitem__,None,vectori)
vectori.append = new_instancemethod(_loci.vectori_append,None,vectori)
vectori.empty = new_instancemethod(_loci.vectori_empty,None,vectori)
vectori.size = new_instancemethod(_loci.vectori_size,None,vectori)
vectori.clear = new_instancemethod(_loci.vectori_clear,None,vectori)
vectori.swap = new_instancemethod(_loci.vectori_swap,None,vectori)
vectori.get_allocator = new_instancemethod(_loci.vectori_get_allocator,None,vectori)
vectori.begin = new_instancemethod(_loci.vectori_begin,None,vectori)
vectori.end = new_instancemethod(_loci.vectori_end,None,vectori)
vectori.rbegin = new_instancemethod(_loci.vectori_rbegin,None,vectori)
vectori.rend = new_instancemethod(_loci.vectori_rend,None,vectori)
vectori.pop_back = new_instancemethod(_loci.vectori_pop_back,None,vectori)
vectori.erase = new_instancemethod(_loci.vectori_erase,None,vectori)
vectori.push_back = new_instancemethod(_loci.vectori_push_back,None,vectori)
vectori.front = new_instancemethod(_loci.vectori_front,None,vectori)
vectori.back = new_instancemethod(_loci.vectori_back,None,vectori)
vectori.assign = new_instancemethod(_loci.vectori_assign,None,vectori)
vectori.resize = new_instancemethod(_loci.vectori_resize,None,vectori)
vectori.insert = new_instancemethod(_loci.vectori_insert,None,vectori)
vectori.reserve = new_instancemethod(_loci.vectori_reserve,None,vectori)
vectori.capacity = new_instancemethod(_loci.vectori_capacity,None,vectori)
vectori_swigregister = _loci.vectori_swigregister
vectori_swigregister(vectori)

class matrixi(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _loci.matrixi_swiginit(self,_loci.new_matrixi(*args))
    __swig_destroy__ = _loci.delete_matrixi
matrixi.iterator = new_instancemethod(_loci.matrixi_iterator,None,matrixi)
matrixi.__nonzero__ = new_instancemethod(_loci.matrixi___nonzero__,None,matrixi)
matrixi.__bool__ = new_instancemethod(_loci.matrixi___bool__,None,matrixi)
matrixi.__len__ = new_instancemethod(_loci.matrixi___len__,None,matrixi)
matrixi.pop = new_instancemethod(_loci.matrixi_pop,None,matrixi)
matrixi.__getslice__ = new_instancemethod(_loci.matrixi___getslice__,None,matrixi)
matrixi.__setslice__ = new_instancemethod(_loci.matrixi___setslice__,None,matrixi)
matrixi.__delslice__ = new_instancemethod(_loci.matrixi___delslice__,None,matrixi)
matrixi.__delitem__ = new_instancemethod(_loci.matrixi___delitem__,None,matrixi)
matrixi.__getitem__ = new_instancemethod(_loci.matrixi___getitem__,None,matrixi)
matrixi.__setitem__ = new_instancemethod(_loci.matrixi___setitem__,None,matrixi)
matrixi.append = new_instancemethod(_loci.matrixi_append,None,matrixi)
matrixi.empty = new_instancemethod(_loci.matrixi_empty,None,matrixi)
matrixi.size = new_instancemethod(_loci.matrixi_size,None,matrixi)
matrixi.clear = new_instancemethod(_loci.matrixi_clear,None,matrixi)
matrixi.swap = new_instancemethod(_loci.matrixi_swap,None,matrixi)
matrixi.get_allocator = new_instancemethod(_loci.matrixi_get_allocator,None,matrixi)
matrixi.begin = new_instancemethod(_loci.matrixi_begin,None,matrixi)
matrixi.end = new_instancemethod(_loci.matrixi_end,None,matrixi)
matrixi.rbegin = new_instancemethod(_loci.matrixi_rbegin,None,matrixi)
matrixi.rend = new_instancemethod(_loci.matrixi_rend,None,matrixi)
matrixi.pop_back = new_instancemethod(_loci.matrixi_pop_back,None,matrixi)
matrixi.erase = new_instancemethod(_loci.matrixi_erase,None,matrixi)
matrixi.push_back = new_instancemethod(_loci.matrixi_push_back,None,matrixi)
matrixi.front = new_instancemethod(_loci.matrixi_front,None,matrixi)
matrixi.back = new_instancemethod(_loci.matrixi_back,None,matrixi)
matrixi.assign = new_instancemethod(_loci.matrixi_assign,None,matrixi)
matrixi.resize = new_instancemethod(_loci.matrixi_resize,None,matrixi)
matrixi.insert = new_instancemethod(_loci.matrixi_insert,None,matrixi)
matrixi.reserve = new_instancemethod(_loci.matrixi_reserve,None,matrixi)
matrixi.capacity = new_instancemethod(_loci.matrixi_capacity,None,matrixi)
matrixi_swigregister = _loci.matrixi_swigregister
matrixi_swigregister(matrixi)

class matrixf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _loci.matrixf_swiginit(self,_loci.new_matrixf(*args))
    __swig_destroy__ = _loci.delete_matrixf
matrixf.iterator = new_instancemethod(_loci.matrixf_iterator,None,matrixf)
matrixf.__nonzero__ = new_instancemethod(_loci.matrixf___nonzero__,None,matrixf)
matrixf.__bool__ = new_instancemethod(_loci.matrixf___bool__,None,matrixf)
matrixf.__len__ = new_instancemethod(_loci.matrixf___len__,None,matrixf)
matrixf.pop = new_instancemethod(_loci.matrixf_pop,None,matrixf)
matrixf.__getslice__ = new_instancemethod(_loci.matrixf___getslice__,None,matrixf)
matrixf.__setslice__ = new_instancemethod(_loci.matrixf___setslice__,None,matrixf)
matrixf.__delslice__ = new_instancemethod(_loci.matrixf___delslice__,None,matrixf)
matrixf.__delitem__ = new_instancemethod(_loci.matrixf___delitem__,None,matrixf)
matrixf.__getitem__ = new_instancemethod(_loci.matrixf___getitem__,None,matrixf)
matrixf.__setitem__ = new_instancemethod(_loci.matrixf___setitem__,None,matrixf)
matrixf.append = new_instancemethod(_loci.matrixf_append,None,matrixf)
matrixf.empty = new_instancemethod(_loci.matrixf_empty,None,matrixf)
matrixf.size = new_instancemethod(_loci.matrixf_size,None,matrixf)
matrixf.clear = new_instancemethod(_loci.matrixf_clear,None,matrixf)
matrixf.swap = new_instancemethod(_loci.matrixf_swap,None,matrixf)
matrixf.get_allocator = new_instancemethod(_loci.matrixf_get_allocator,None,matrixf)
matrixf.begin = new_instancemethod(_loci.matrixf_begin,None,matrixf)
matrixf.end = new_instancemethod(_loci.matrixf_end,None,matrixf)
matrixf.rbegin = new_instancemethod(_loci.matrixf_rbegin,None,matrixf)
matrixf.rend = new_instancemethod(_loci.matrixf_rend,None,matrixf)
matrixf.pop_back = new_instancemethod(_loci.matrixf_pop_back,None,matrixf)
matrixf.erase = new_instancemethod(_loci.matrixf_erase,None,matrixf)
matrixf.push_back = new_instancemethod(_loci.matrixf_push_back,None,matrixf)
matrixf.front = new_instancemethod(_loci.matrixf_front,None,matrixf)
matrixf.back = new_instancemethod(_loci.matrixf_back,None,matrixf)
matrixf.assign = new_instancemethod(_loci.matrixf_assign,None,matrixf)
matrixf.resize = new_instancemethod(_loci.matrixf_resize,None,matrixf)
matrixf.insert = new_instancemethod(_loci.matrixf_insert,None,matrixf)
matrixf.reserve = new_instancemethod(_loci.matrixf_reserve,None,matrixf)
matrixf.capacity = new_instancemethod(_loci.matrixf_capacity,None,matrixf)
matrixf_swigregister = _loci.matrixf_swigregister
matrixf_swigregister(matrixf)

class vectoro(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _loci.vectoro_swiginit(self,_loci.new_vectoro(*args))
    __swig_destroy__ = _loci.delete_vectoro
vectoro.iterator = new_instancemethod(_loci.vectoro_iterator,None,vectoro)
vectoro.__nonzero__ = new_instancemethod(_loci.vectoro___nonzero__,None,vectoro)
vectoro.__bool__ = new_instancemethod(_loci.vectoro___bool__,None,vectoro)
vectoro.__len__ = new_instancemethod(_loci.vectoro___len__,None,vectoro)
vectoro.pop = new_instancemethod(_loci.vectoro_pop,None,vectoro)
vectoro.__getslice__ = new_instancemethod(_loci.vectoro___getslice__,None,vectoro)
vectoro.__setslice__ = new_instancemethod(_loci.vectoro___setslice__,None,vectoro)
vectoro.__delslice__ = new_instancemethod(_loci.vectoro___delslice__,None,vectoro)
vectoro.__delitem__ = new_instancemethod(_loci.vectoro___delitem__,None,vectoro)
vectoro.__getitem__ = new_instancemethod(_loci.vectoro___getitem__,None,vectoro)
vectoro.__setitem__ = new_instancemethod(_loci.vectoro___setitem__,None,vectoro)
vectoro.append = new_instancemethod(_loci.vectoro_append,None,vectoro)
vectoro.empty = new_instancemethod(_loci.vectoro_empty,None,vectoro)
vectoro.size = new_instancemethod(_loci.vectoro_size,None,vectoro)
vectoro.clear = new_instancemethod(_loci.vectoro_clear,None,vectoro)
vectoro.swap = new_instancemethod(_loci.vectoro_swap,None,vectoro)
vectoro.get_allocator = new_instancemethod(_loci.vectoro_get_allocator,None,vectoro)
vectoro.begin = new_instancemethod(_loci.vectoro_begin,None,vectoro)
vectoro.end = new_instancemethod(_loci.vectoro_end,None,vectoro)
vectoro.rbegin = new_instancemethod(_loci.vectoro_rbegin,None,vectoro)
vectoro.rend = new_instancemethod(_loci.vectoro_rend,None,vectoro)
vectoro.pop_back = new_instancemethod(_loci.vectoro_pop_back,None,vectoro)
vectoro.erase = new_instancemethod(_loci.vectoro_erase,None,vectoro)
vectoro.push_back = new_instancemethod(_loci.vectoro_push_back,None,vectoro)
vectoro.front = new_instancemethod(_loci.vectoro_front,None,vectoro)
vectoro.back = new_instancemethod(_loci.vectoro_back,None,vectoro)
vectoro.assign = new_instancemethod(_loci.vectoro_assign,None,vectoro)
vectoro.resize = new_instancemethod(_loci.vectoro_resize,None,vectoro)
vectoro.insert = new_instancemethod(_loci.vectoro_insert,None,vectoro)
vectoro.reserve = new_instancemethod(_loci.vectoro_reserve,None,vectoro)
vectoro.capacity = new_instancemethod(_loci.vectoro_capacity,None,vectoro)
vectoro_swigregister = _loci.vectoro_swigregister
vectoro_swigregister(vectoro)

class Exception(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.Exception_swiginit(self,_loci.new_Exception(*args, **kwargs))
    __swig_destroy__ = _loci.delete_Exception
Exception.message = new_instancemethod(_loci.Exception_message,None,Exception)
Exception_swigregister = _loci.Exception_swigregister
Exception_swigregister(Exception)

class StopIteration(Exception):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.StopIteration_swiginit(self,_loci.new_StopIteration(*args, **kwargs))
    __swig_destroy__ = _loci.delete_StopIteration
StopIteration_swigregister = _loci.StopIteration_swigregister
StopIteration_swigregister(StopIteration)

class IndexError(Exception):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.IndexError_swiginit(self,_loci.new_IndexError(*args, **kwargs))
    __swig_destroy__ = _loci.delete_IndexError
IndexError_swigregister = _loci.IndexError_swigregister
IndexError_swigregister(IndexError)

class ValueError(Exception):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.ValueError_swiginit(self,_loci.new_ValueError(*args, **kwargs))
    __swig_destroy__ = _loci.delete_ValueError
ValueError_swigregister = _loci.ValueError_swigregister
ValueError_swigregister(ValueError)

class SystemError(Exception):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.SystemError_swiginit(self,_loci.new_SystemError(*args, **kwargs))
    __swig_destroy__ = _loci.delete_SystemError
SystemError_swigregister = _loci.SystemError_swigregister
SystemError_swigregister(SystemError)

class RuntimeError(Exception):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.RuntimeError_swiginit(self,_loci.new_RuntimeError(*args, **kwargs))
    __swig_destroy__ = _loci.delete_RuntimeError
RuntimeError_swigregister = _loci.RuntimeError_swigregister
RuntimeError_swigregister(RuntimeError)

class RNG(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _loci.RNG_swiginit(self,_loci.new_RNG())
    __swig_destroy__ = _loci.delete_RNG
RNG.get = new_instancemethod(_loci.RNG_get,None,RNG)
RNG.set = new_instancemethod(_loci.RNG_set,None,RNG)
RNG.runif = new_instancemethod(_loci.RNG_runif,None,RNG)
RNG_swigregister = _loci.RNG_swigregister
RNG_swigregister(RNG)

class RunningStat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, left=0, right=0): 
        _loci.RunningStat_swiginit(self,_loci.new_RunningStat(left, right))
    __swig_destroy__ = _loci.delete_RunningStat
RunningStat.add = new_instancemethod(_loci.RunningStat_add,None,RunningStat)
RunningStat.var = new_instancemethod(_loci.RunningStat_var,None,RunningStat)
RunningStat.sd = new_instancemethod(_loci.RunningStat_sd,None,RunningStat)
RunningStat.mean = new_instancemethod(_loci.RunningStat_mean,None,RunningStat)
RunningStat.left = new_instancemethod(_loci.RunningStat_left,None,RunningStat)
RunningStat.right = new_instancemethod(_loci.RunningStat_right,None,RunningStat)
RunningStat_swigregister = _loci.RunningStat_swigregister
RunningStat_swigregister(RunningStat)

class LociData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _loci.LociData_swiginit(self,_loci.new_LociData())
    __swig_destroy__ = _loci.delete_LociData
LociData.clone = new_instancemethod(_loci.LociData_clone,None,LociData)
LociData.set_chain1 = new_instancemethod(_loci.LociData_set_chain1,None,LociData)
LociData.set_chain2 = new_instancemethod(_loci.LociData_set_chain2,None,LociData)
LociData.chain1 = new_instancemethod(_loci.LociData_chain1,None,LociData)
LociData.chain2 = new_instancemethod(_loci.LociData_chain2,None,LociData)
LociData.set_moi = new_instancemethod(_loci.LociData_set_moi,None,LociData)
LociData.set_param = new_instancemethod(_loci.LociData_set_param,None,LociData)
LociData.has = new_instancemethod(_loci.LociData_has,None,LociData)
LociData.info = new_instancemethod(_loci.LociData_info,None,LociData)
LociData.annf = new_instancemethod(_loci.LociData_annf,None,LociData)
LociData.anni = new_instancemethod(_loci.LociData_anni,None,LociData)
LociData.anns = new_instancemethod(_loci.LociData_anns,None,LociData)
LociData.init_maf = new_instancemethod(_loci.LociData_init_maf,None,LociData)
LociData.get_maf = new_instancemethod(_loci.LociData_get_maf,None,LociData)
LociData.get_function_class = new_instancemethod(_loci.LociData_get_function_class,None,LociData)
LociData.get_variant_class = new_instancemethod(_loci.LociData_get_variant_class,None,LociData)
LociData.get_direction = new_instancemethod(_loci.LociData_get_direction,None,LociData)
LociData.get_position = new_instancemethod(_loci.LociData_get_position,None,LociData)
LociData.get_missingness = new_instancemethod(_loci.LociData_get_missingness,None,LociData)
LociData.get_haplotype1 = new_instancemethod(_loci.LociData_get_haplotype1,None,LociData)
LociData.get_haplotype2 = new_instancemethod(_loci.LociData_get_haplotype2,None,LociData)
LociData.get_genotype_additive = new_instancemethod(_loci.LociData_get_genotype_additive,None,LociData)
LociData.get_genotype = new_instancemethod(_loci.LociData_get_genotype,None,LociData)
LociData.get_burden = new_instancemethod(_loci.LociData_get_burden,None,LociData)
LociData.get_function_score = new_instancemethod(_loci.LociData_get_function_score,None,LociData)
LociData.get_gf0 = new_instancemethod(_loci.LociData_get_gf0,None,LociData)
LociData.get_gf2 = new_instancemethod(_loci.LociData_get_gf2,None,LociData)
LociData.get_moi = new_instancemethod(_loci.LociData_get_moi,None,LociData)
LociData.get_par = new_instancemethod(_loci.LociData_get_par,None,LociData)
LociData.get_effect = new_instancemethod(_loci.LociData_get_effect,None,LociData)
LociData.get_loci_penetrance = new_instancemethod(_loci.LociData_get_loci_penetrance,None,LociData)
LociData.get_loci_meanshift = new_instancemethod(_loci.LociData_get_loci_meanshift,None,LociData)
LociData.get_cmaf = new_instancemethod(_loci.LociData_get_cmaf,None,LociData)
LociData.get_phenotype = new_instancemethod(_loci.LociData_get_phenotype,None,LociData)
LociData.get_wt_penetrance = new_instancemethod(_loci.LociData_get_wt_penetrance,None,LociData)
LociData.get_heterozygotes_penetrance = new_instancemethod(_loci.LociData_get_heterozygotes_penetrance,None,LociData)
LociData.get_homozygotes_penetrance = new_instancemethod(_loci.LociData_get_homozygotes_penetrance,None,LociData)
LociData.get_all_prevalence = new_instancemethod(_loci.LociData_get_all_prevalence,None,LociData)
LociData.rng = new_instancemethod(_loci.LociData_rng,None,LociData)
LociData.set_seed = new_instancemethod(_loci.LociData_set_seed,None,LociData)
LociData_swigregister = _loci.LociData_swigregister
LociData_swigregister(LociData)

class LociUpdater(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _loci.LociUpdater_swiginit(self,_loci.new_LociUpdater())
    __swig_destroy__ = _loci.delete_LociUpdater
LociUpdater.clone = new_instancemethod(_loci.LociUpdater_clone,None,LociUpdater)
LociUpdater.apply = new_instancemethod(_loci.LociUpdater_apply,None,LociUpdater)
LociUpdater.name = new_instancemethod(_loci.LociUpdater_name,None,LociUpdater)
LociUpdater_swigregister = _loci.LociUpdater_swigregister
LociUpdater_swigregister(LociUpdater)

class GenotypeGenerator(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, option=0): 
        _loci.GenotypeGenerator_swiginit(self,_loci.new_GenotypeGenerator(option))
    __swig_destroy__ = _loci.delete_GenotypeGenerator
GenotypeGenerator_swigregister = _loci.GenotypeGenerator_swigregister
GenotypeGenerator_swigregister(GenotypeGenerator)

class GenotypeSampler(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.GenotypeSampler_swiginit(self,_loci.new_GenotypeSampler(*args, **kwargs))
    __swig_destroy__ = _loci.delete_GenotypeSampler
GenotypeSampler.apply = new_instancemethod(_loci.GenotypeSampler_apply,None,GenotypeSampler)
GenotypeSampler_swigregister = _loci.GenotypeSampler_swigregister
GenotypeSampler_swigregister(GenotypeSampler)

class PARModel(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.PARModel_swiginit(self,_loci.new_PARModel(*args, **kwargs))
    __swig_destroy__ = _loci.delete_PARModel
PARModel_swigregister = _loci.PARModel_swigregister
PARModel_swigregister(PARModel)

class PARGFUpdater(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.PARGFUpdater_swiginit(self,_loci.new_PARGFUpdater(*args, **kwargs))
    __swig_destroy__ = _loci.delete_PARGFUpdater
PARGFUpdater_swigregister = _loci.PARGFUpdater_swigregister
PARGFUpdater_swigregister(PARGFUpdater)

class ORModel(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.ORModel_swiginit(self,_loci.new_ORModel(*args, **kwargs))
    __swig_destroy__ = _loci.delete_ORModel
ORModel_swigregister = _loci.ORModel_swigregister
ORModel_swigregister(ORModel)

class ORGFUpdater(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.ORGFUpdater_swiginit(self,_loci.new_ORGFUpdater(*args, **kwargs))
    __swig_destroy__ = _loci.delete_ORGFUpdater
ORGFUpdater_swigregister = _loci.ORGFUpdater_swigregister
ORGFUpdater_swigregister(ORGFUpdater)

class GFResetter(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _loci.GFResetter_swiginit(self,_loci.new_GFResetter())
    __swig_destroy__ = _loci.delete_GFResetter
GFResetter_swigregister = _loci.GFResetter_swigregister
GFResetter_swigregister(GFResetter)

class DiseaseEffectGenerator(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.DiseaseEffectGenerator_swiginit(self,_loci.new_DiseaseEffectGenerator(*args, **kwargs))
    __swig_destroy__ = _loci.delete_DiseaseEffectGenerator
DiseaseEffectGenerator_swigregister = _loci.DiseaseEffectGenerator_swigregister
DiseaseEffectGenerator_swigregister(DiseaseEffectGenerator)

class DiseaseStatusGenerator(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _loci.DiseaseStatusGenerator_swiginit(self,_loci.new_DiseaseStatusGenerator())
    __swig_destroy__ = _loci.delete_DiseaseStatusGenerator
DiseaseStatusGenerator_swigregister = _loci.DiseaseStatusGenerator_swigregister
DiseaseStatusGenerator_swigregister(DiseaseStatusGenerator)

class MeanShiftModel(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        _loci.MeanShiftModel_swiginit(self,_loci.new_MeanShiftModel(*args, **kwargs))
    __swig_destroy__ = _loci.delete_MeanShiftModel
MeanShiftModel_swigregister = _loci.MeanShiftModel_swigregister
MeanShiftModel_swigregister(MeanShiftModel)

class QtEffectGenerator(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _loci.QtEffectGenerator_swiginit(self,_loci.new_QtEffectGenerator())
    __swig_destroy__ = _loci.delete_QtEffectGenerator
QtEffectGenerator_swigregister = _loci.QtEffectGenerator_swigregister
QtEffectGenerator_swigregister(QtEffectGenerator)

class QtValueGenerator(LociUpdater):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _loci.QtValueGenerator_swiginit(self,_loci.new_QtValueGenerator())
    __swig_destroy__ = _loci.delete_QtValueGenerator
QtValueGenerator_swigregister = _loci.QtValueGenerator_swigregister
QtValueGenerator_swigregister(QtValueGenerator)


def generate_disease_by_OR(*args, **kwargs):
  return _loci.generate_disease_by_OR(*args, **kwargs)
generate_disease_by_OR = _loci.generate_disease_by_OR

def generate_disease_by_PAR_OR(*args, **kwargs):
  return _loci.generate_disease_by_PAR_OR(*args, **kwargs)
generate_disease_by_PAR_OR = _loci.generate_disease_by_PAR_OR

def generate_qt(*args, **kwargs):
  return _loci.generate_qt(*args, **kwargs)
generate_qt = _loci.generate_qt

def generate_qt_extremes_infinite(*args, **kwargs):
  return _loci.generate_qt_extremes_infinite(*args, **kwargs)
generate_qt_extremes_infinite = _loci.generate_qt_extremes_infinite

def generate_qt_extremes_finite(*args, **kwargs):
  return _loci.generate_qt_extremes_finite(*args, **kwargs)
generate_qt_extremes_finite = _loci.generate_qt_extremes_finite


